Lists:::

val l=List(10,20,30,40)
val l1=(10 to 40 by 10).toList
Take empty list and append elements.
empty list is denoted by nil
10::20::30::Nil

Using toList method:::
Source.fromFile("server.log").mkString.split("\n").toList


List methods to concentrate
map,reduce,foldleft,foldright,reduceleft,reduceright
filter
count
foreach

------------------------------
create a list with 1 to 10

val l = (1 to 10 ).toList

create a list that have student id, studentname, gender M/F
val s=List((1,"stu1","M"),(2,"stu2","F"),(3,"stu3","M"),(4,"stu4","M"),(5,"stu5","F"))
-----------------------------

map method 

generate a new List with every element incremented by 10

val f=(x:Int)=>{ x +10}
l.map(f)

res21: List[Int] = List(11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
l.map( (x:Int) => { x+ 10 } )

for ( a <- l) yield a+10  for comprehension
--------------------------
val l1=List("hi welcome to class","hi welcome to class")

l1.map(l=> l.split(" ")).flatten
l1.flatMap(l=>l.split(" "))
-----------------------------

scala> l.filter
   def filter(p: Int => Boolean): List[Int]

scala> l.filter(x=> x%2==1)
res43: List[Int] = List(1, 3, 5, 7, 9)

scala> l.filterNot(x=> x%2==1)
res44: List[Int] = List(2, 4, 6, 8, 10)

s
res46: List[(Int, String, String)] = List((1,stu1,M), (2,stu2,F), (3,stu3,M), (4,stu4,M), (5,stu5,F))

scala> s.filter(t=> t._3=="M")
res47: List[(Int, String, String)] = List((1,stu1,M), (3,stu3,M), (4,stu4,M))
-----------------------------

val (l1,l2)=l.partition(e => e%2==0)
l1: List[Int] = List(2, 4, 6, 8, 10)
l2: List[Int] = List(1, 3, 5, 7, 9)

-----------------------
From student list, get (id,gender) and l1 should have male, l2 should have female 

s.map(t=>(t._1,t._3)).partition(x=>x._2=="M")
res59: (List[(Int, String)], List[(Int, String)]) = (List((1,M), (3,M), (4,M)),List((2,F), (5,F)))
----------------------------
zipWithIndex
-------------------------

map,filter,flatten,flatMap, partition, yield , zipWithIndex 
foreach
---------------------------


val l=(1 to 10).toList

val fn=(x:Int,y:Int)=>{ 
println("x value is::"+x)
println("y value is::"+y)
println("x+y value is ::"+ (x+y))
x+y
}

l.reduceLeft(fn)
l.reduceRight(fn)
l.reduce(fn)

l.reduceLeft((x,y)=>x+y)
l.reduceRight((x,y)=>x+y)
l.reduce((x,y)=>x+y)

find min and max using reduceLeft/reduceRight/reduce
val l1=List(100,30,45,10,3000,99)
l1: List[Int] = List(100, 30, 45, 10, 3000, 99)

find max number
l.reduceLeft((x,y)=>{if(x<y) y else x})
for min number
l.reduceLeft((x,y)=>{if(x>y) y else x})


val fn=(x:Int,y:Int)=>{ 
println("x value is::"+x)
println("y value is::"+y)
if(x<y) y else x
}

------------------------------

l1.find(x=>x>30)

Option data type:: it can contain some values or None

how to get data from Option?? 
Option.getOrElse(default value) -> if u have some value return it, if u dont have any value return default value.

-------------------------------


















